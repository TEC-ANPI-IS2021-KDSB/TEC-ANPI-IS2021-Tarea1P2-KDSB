# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QMessageBox, QDialog
from sympy.plotting import plot
from sympy import *
import sympy as S
from Metodos import *

# Importando otras ventanas
from ui_helpdialog import Ui_Dialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(595, 510)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 20, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setObjectName("label")

        # Input de la funcion
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(60, 60, 281, 47))
        self.textEdit.setObjectName("textEdit")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(60, 120, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(200, 120, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        # Extremos de la previsualizacion
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 120, 85, 28))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(250, 120, 85, 28))
        self.lineEdit_2.setObjectName("lineEdit_2")
        # Validadores
        self.onlyDouble = QDoubleValidator()
        self.lineEdit.setValidator(self.onlyDouble)
        self.lineEdit_2.setValidator(self.onlyDouble)

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 160, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")

        # Radio buttons
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(50, 190, 291, 24))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setChecked(True)
        self.radioButton.toggled.connect(self.biSelected)


        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(320, 190, 291, 24))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.toggled.connect(self.falsaSelected)

        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(50, 220, 291, 24))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_3.toggled.connect(self.nrSelected)

        self.radioButton_4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_4.setGeometry(QtCore.QRect(320, 220, 291, 24))
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_4.toggled.connect(self.secSelected)

        self.radioButton_5 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_5.setGeometry(QtCore.QRect(150, 250, 291, 24))
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_5.toggled.connect(self.tresSelected)

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 280, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 310, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(180, 400, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(150, 320, 121, 28))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(330, 410, 51, 28))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(420, 410, 51, 28))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(460, 320, 121, 28))
        self.lineEdit_6.setObjectName("lineEdit_6")
        # Validadores
        self.lineEdit_3.setValidator(self.onlyDouble)
        self.lineEdit_4.setValidator(self.onlyDouble)
        self.lineEdit_5.setValidator(self.onlyDouble)
        self.lineEdit_6.setValidator(self.onlyDouble)

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(390, 410, 21, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        # help button
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(530, 10, 51, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.showHelp)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(250, 450, 107, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(290, 310, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")

        # Boton de previsualizar
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(360, 60, 131, 91))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.showGrafica)

        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(40, 360, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(150, 360, 121, 28))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(290, 350, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(460, 360, 121, 28))
        self.lineEdit_8.setObjectName("lineEdit_8")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.helpDialog = QDialog()
        self.helpui = Ui_Dialog()
        self.helpui.setupUi(self.helpDialog)

        # Default value
        self.solution = ""
        self.biSelected()

    # Shows the help dialog
    def showHelp(self):
        self.helpDialog.show()

    # Esta funcion se ejecuta al presionar el boton calcular
    def calcular(self):

        # Expeficamos que x va a corresponder al simbolo x
        x = Symbol('x')

        # Aqui iniciamos la verificacion de los valores de entrada y avisamos al usuario si alguno no tiene el formato que deberia

        # Verificacion del primer valor inicial para newton-raphson o secante
        try:
            if self.solution == "nr" or self.solution == "sec":
                float(self.lineEdit_3.text().replace(',', '.'))
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error', 'El primer valor inicial no es valido')
            return

            # Verificacion del segundo valor inicial para secante
        try:
            if self.solution == "sec":
                float(self.lineEdit_6.text().replace(',', '.'))
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error', 'El segundo valor inicial no es valido')
            return

        # Verficacion del intervalo para biseccion y falsa posicion
        try:
            if self.solution == "falsa" or self.solution == "bi":
                num1 = float(self.lineEdit_4.text().replace(',', '.'))
                num2 = float(self.lineEdit_5.text().replace(',', '.'))
                if (num1 > num2):  # Verificamos que el maximo del intervalo sea mayor al minimo
                    QMessageBox.critical(self.centralwidget, 'Error', 'El minimo del intervalo es mayor al maximo')
                    return
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error', 'Uno de los extremos del intervalo no es valido')
            return
        # Aqui verificamos la tolerancia y las iteraciones maximas
        try:
            tol = eval(self.lineEdit_7.text().replace('^','**'))
            maxIt = int(self.lineEdit_8.text())
            if tol < 0 or maxIt <= 0:
                raise Exception('Error en tolerancia e iteraciones')
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error',
                                 'La tolerancia y las iteraciones maximas deben ser validas y mayores a 0')
            return

        # Aqui tratamos de encontrar la solucion a la funcion, de no encontrarse avisamos al usuario
        try:
            # Seteamos las variables que vamos a ocupar
            # Funcion a evaluar
            funcion =self.textEdit.toPlainText()
            metodo = self.solution  # Metodo a utilizar
            # Valores iniciales
            x0=0
            x1=0
            a=0
            b=0
            if(metodo=="nr" or metodo=="sec" or metodo=="tres"):
                x0 = float(self.lineEdit_3.text().replace(',', '.'))
                if(metodo=="sec"):
                    x1 = float(self.lineEdit_6.text().replace(',', '.'))
            # [a,b]
            if(metodo=="bi" or metodo=="falsa"):
                a = float(self.lineEdit_4.text().replace(',', '.'))
                b = float(self.lineEdit_5.text().replace(',', '.'))

            solutionTuple = None
            if (metodo == "nr"):
                solutionTuple=newton_raphson(funcion, x0, tol, maxIt)
            elif (metodo == "sec"):
                solutionTuple = secante(funcion, x0, x1, tol, maxIt)
            elif (metodo=="bi"):
                solutionTuple = biseccion(funcion,a,b,tol,maxIt)
            elif(metodo=="tres"):
                solutionTuple=metodo_nuevo(funcion,x0,tol,maxIt)
            else:
                solutionTuple=falsa_posicion(funcion,a,b,tol,maxIt)

            resultadoString = "La aproximacion de la funcion es {},con un error de {} encontrado en {} iteraciones".format(solutionTuple[0],
                                                                                                    solutionTuple[2],solutionTuple[1])  # Esto es lo que se va a mostrar en la pantalla
            QMessageBox.information(self.centralwidget, 'Resultado satisfactorio', resultadoString)

        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error','Para previsualizar la gráfica la función debe ser válida')
            print(ex)
            return

    # Metodos para los radio buttons
    def biSelected(self):
        self.solution = "bi"
        self.lineEdit_3.setDisabled(True)
        self.lineEdit_6.setDisabled(True)
        self.lineEdit_4.setDisabled(False)
        self.lineEdit_5.setDisabled(False)

    def nrSelected(self):
        self.solution = "nr"
        self.lineEdit_3.setDisabled(False)
        self.lineEdit_6.setDisabled(True)
        self.lineEdit_4.setDisabled(True)
        self.lineEdit_5.setDisabled(True)

    def falsaSelected(self):
        self.solution = "falsa"
        self.lineEdit_3.setDisabled(True)
        self.lineEdit_6.setDisabled(True)
        self.lineEdit_4.setDisabled(False)
        self.lineEdit_5.setDisabled(False)

    def secSelected(self):
        self.solution = "sec"
        self.lineEdit_3.setDisabled(False)
        self.lineEdit_6.setDisabled(False)
        self.lineEdit_4.setDisabled(True)
        self.lineEdit_5.setDisabled(True)

    def tresSelected(self):
        self.solution = "tres"
        self.lineEdit_3.setDisabled(False)
        self.lineEdit_6.setDisabled(True)
        self.lineEdit_4.setDisabled(True)
        self.lineEdit_5.setDisabled(True)

    def showGrafica(self):
        x = Symbol('x')
        try:
            float(self.lineEdit.text().replace(',', '.'))
            float(self.lineEdit_2.text().replace(',', '.'))
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error', 'Uno de los dos extremos de la funcion no es valido')
            return

        if float(self.lineEdit.text().replace(',', '.')) > float(self.lineEdit_2.text().replace(',', '.')):
            QMessageBox.critical(self.centralwidget, 'Error', 'El maximo del intervalo a mostrar es menor al minimo')
            return
        try:
            funcion = sympify(self.textEdit.toPlainText())
            plot(funcion,(x, float(self.lineEdit.text().replace(',', '.')), float(self.lineEdit_2.text().replace(',', '.'))))
        except Exception as ex:
            QMessageBox.critical(self.centralwidget, 'Error','Para previsualizar la gráfica la función debe ser válida')
            print(ex)
            return

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Ingrese la función"))
        self.label_2.setText(_translate("MainWindow", "Desde"))
        self.label_3.setText(_translate("MainWindow", "Hasta"))
        self.label_4.setText(_translate("MainWindow", "Elija un método de solución"))
        self.radioButton.setText(_translate("MainWindow", "Método de la bisección"))
        self.radioButton_2.setText(_translate("MainWindow", "Método de la falsa posicion"))
        self.radioButton_3.setText(_translate("MainWindow", "Método de Newton-Raphson"))
        self.radioButton_4.setText(_translate("MainWindow", "Método de la secante"))
        self.radioButton_5.setText(_translate("MainWindow", "Esquemas mejorados de tres pasos"))
        self.label_5.setText(_translate("MainWindow", "Parámetros iniciales"))
        self.label_6.setText(_translate("MainWindow", "Valor inicial"))
        self.label_7.setText(_translate("MainWindow", "Elija un intervalo"))
        self.label_8.setText(_translate("MainWindow", "-"))
        self.pushButton.setText(_translate("MainWindow", "Help"))
        self.pushButton_2.setText(_translate("MainWindow", "Calcular"))
        self.pushButton_2.clicked.connect(self.calcular)
        self.label_9.setText(_translate("MainWindow", "Segundo valor inicial"))
        self.pushButton_3.setText(_translate("MainWindow", "Previsualizar"))
        self.label_10.setText(_translate("MainWindow", "Tolerancia"))
        self.label_11.setText(_translate("MainWindow", "Iteraciones maximas"))
